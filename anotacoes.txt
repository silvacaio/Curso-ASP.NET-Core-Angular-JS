1 Aula - Historia: CONCLUIDA
	ASP.NET Core:
		Comandos .NET Cli: .dotnet -help
		
		Standar Library: Compatibilidade entre as framework dotnet, Informa a possibilidade de convers�ao de aplica��es em dotnet framework para o dotnet core.
						 API que tem o contrato de todas as funcionalidades, padrão. Surface API.

__________________________________________

2 Aula - Configuração do ambiente: CONCLUIDA
	Download .net.core: microsoft.net

	Independente da plataforma existe suporte, documentação...

	Gerenciamento de versões: dotnet --info
	Global.json: Define a versão do .net a ser utilizada na aplicação.
__________________________________________


3 Aula - Primeira APP: CONCLUIDA
	Utilizando o Visual Studio.

	Bower: repositorio de projetos (assim como o NuGet). O Bower é um repositorio front-end.

__________________________________________

4 Aula - Middleware : CONCLUIDA

	Middlewares: manipulam dados entre os requests e responses (pipeline).
	Owin (Open Web interface for .NET): Antigamente o .NET dependendia de uma plataforma (server, web host) para rodar (IIS).
		 								Utiliza uma interface para comunicar estes dois componentes.

	O novo  pipeline do .net core é uma coleção de Middleware. PLAY AS YO GO: só usar aquilo que é necessario e nada mais.

	Interfaces utilizadas:
		
		IHostingEnvironment: Fornence informações sobre o ambiente de hospedagem.
		IConfigurationRoot: Raiz de uma hierarquia. Interface de implementação.
		IServiceCollection: Representa um contrato de uma coleção de serviços. (onde será adicionado os novos Middlewares).
		IApplicationBuilder: prove mecanismos de configuração de um Middlewares. Configuração dos Middlewares.
		ILoggerFactory: Configuração do logs do sistema.

		User secrets: forma de armazernar algum dado, que não seja visivel junto ao projeto.	

		host: Forma como a aplicação irá rodar, como será a hospedagem. "Kestrel é o host da aplicação".
		iis: é o servidor, onde irá rodar a aplicação.

5 Aula - MVC: CONCLUIDA

		Padrão arquitetural: se encaixa em uma arquitetura existente.
		Separação de responsabilidades.
		Controller:
			Rotas: estruturas de navegação.
			Attribute Routes: atributo em cima do metodo na controller. Documentação oficial informa todos os tipos possiveis de parametros possiveis pra controller. 
			Bind: filtra o que quer receber, recebe exatamente aquelas propriedades.
			ActionName: Não é possivel ter duas "Actions" com o mesmo nome, por isso o ActionName simula isto. Exemplo: action Delete e DeleteConfirm (na DeleteConfirm adicionar uma ActionName("Delete"), possibilitando que seja chamado com o comando "Delete" na view) 
			ValidateAntiForgeryToken: Valida que a página que fez o post é a mesma que solicitou a exclusão. 

		Model: 
			Representação de um modelo do mundo real ou DTO representa N modelos.
			DataAnnotation: realizar validações no objeto. Criar DataAnnotation, validar de acordo com outros valores (ver documentação).
			Para enviar mais de uma classe em um modelo, criar uma ViewModel com uma propriedade para cada classe.
		
		Views:
			Razor: motor de renderização.
			_ViewStart: definição do layout (qual viu faz o layout basico da aplicação).
			_ViewImports: configuração do tag helper.
			View Components: componentes para ser utilizado em qualquer view, possui requisições server side.


6 Aula - Entity framework core: CONCLUIDA

			Dentre todas as novidades é a mais imatura.
			Possui um pacote para cada tipo do banco: oracle, sql... necessario fazer o install-package de cada pacote
			Construtor do DbContext não recebe mais apenas a string de conexão, recebe um DbContextOptions
			Necessario instalar as tools do Entity para poder utilizar os migrations 

			update-database -script: mostrar o que será criado.
			update-database -verbose: mostra a execução do script.

7 Aula - Identity 3 e segurança: CONCLUIDA

			Contexto do Identity deve ser único, tendo outro contexto para o sistema.
			Não é recomendavel alterar o "ApplicationUser", outra tabela para os dados do personagem a utilizar o sistema.
			Autenticação por terceiros (facebook): necessario instalar o pacote de autenticação "Authentication.Facebook) e setar no confire do Startup
			Roles: Quem pode acessar. Deixa o sistema ingessado, pois uma nova autorização necessita uma costumização.
			Claims: configurar na Startup "addAuthorization", adiciona uma politica. Fica na Cookie.

8 Aula - Ferramentas de front-end:CONCLUIDA

			Node: desenvolvimento js no servidor.
			NPM: Gerenciador de pacotes do Node. Um "Nuget" para arquivos js.
			Bower: repositorio para pacotesm baseado no node. 
			GRUNT: task runner do js. Para minificar arquivos após o build, publish...
			Instalar node/ Utilizar o npm: add um arquivo json com o nome package e adicionar:
																				"name": "asp.net",
																				"private": true,
																				"version": "1.0.0",
																				"devDependencies": {

																				}
																				
			Instalar yeoman: ajuda a criar aplicações, uma ferramenta de scaffolding
			Instalar o generator do asp.net.
			

9 Aula - iniciando a aplicação: CONCLUIDA

	yo aspnet ou dotnet new
	
	Organização:
		src: codigos do projeto/projetos de produção
		testes: códigos de testes/projetos para testar o codigo de produção
		docs: helpers
		sql: arquivos de criação de banco, querys prontas
		
10 Aula - Entidades e validações: CONCLUIDA

	DDD - abordagem de como desenvolver um software que seja de um nível complexo, como resolver estas complexidades. (Entidades, contratos de repositorio, domain services...)
	Dominio - conjunto de responsabilidades que atendem a uma especificadade do negocio (uma camada para pagamento, um para vendas...)
	Apresentação: interface.
	WebServices: meio de acesso a camada de aplicação, caso não exista comuninação direta (caso de um SPA).
	Aplicação: Camada de negocio, orquesta as ações que serão executas no dominio (conversão de dados, conversão da viewmodel, fechamento de transação).
	Infra: 
			Persistencia de dados - repositorio, ORM...
			CrossCutting - segurança, injeção de dependencia...
			
	Qual plataforma escolher?
				Deploy além do WIN, docker? dotnet core.
				Resescrita de uma aplicação full, convertendo para para dotnetcore? dotnet standart.
				(Video a partir do min 22).
				
	SharedKernel: Domain base.
				
		Camada DOMAIN:
			Models - pasta com o nome da cada entidade.
			
	Exception: custa caro, mexe com todo o windows (logs do windows).
	*-*/-/A entidade tem que ser responsavel pelo proprio esta, ela tem que "se validar".
	
11 Aula - Implementando CQRS: CONCLUIDA
	
	Raiz de agregação: tudo que faz parte da mesma "regra de negocio" (Evento é "dono" de categoria, tags...)
	CQRS: separar a responsabilidade de gravaçao da leitura. 
	Evento de aplicação: algo que foi disparado por alguem (classe). 
	EventSourcing: Salvar todos os eventos disparados. Guardar o estado de um registro durante todo o tempo de vida do registro na base.
	Services: 
	
	UnitOfWork: valida se deve salvar ou não diversos comandos.
	BUS: Um canal para disparar comandos e eventos.
	
12 Aula - Tornando o domínio mapeavel para o banco de dados: CONCLUIDA

		Agregação: duas entidades independentes mas que uma só existe por causa da outra (agregação). A agregação deve tratar tudo das filhas.
		
13 - Criando a camada de Dados: CONCLUIDA
		O projeto foi alterado para o dotnet core 2.1.
		
14 - Criando a camada de Aplicação: CONCLUIDA
		Um SPA pode substituir a camada de aplication, pois ele esta esta responsavel por montar e interpretrar viewmodel
		
		Depende dos casos de uso: como que o front end vai fazer.
		Dapper para consultas!!!
		
15 - Desenvolvendo o projeto MVC : CONCLUIDA
		ATUALIZAR A VERSÃO DO CORE: VER ATRAVÉS DO DOTNET --INFO A VERSO FERRAMENTAL UTILIZADA, COLOCAR ESSA VERSÃO NO GLOBAL.JSON. ABRIR O NUGET E VER AS ATUALIZAÇÕES DISPONIVEIS PARA A SLN
		
		Bus: Responsavel pelo enfileiramento.
		
		54min: fala sobre o BUS
		IServiceProvider: //Metodo de acesso ao container de injeção de dependencia 
		Consistencia eventual: memory bus com fila.
			
16 - Complementando as funcionalidades de Apresentação: CONCLUIDA
		
		-Quando se confia MUITO em uma ferramenta, ela acaba regendo a aplicação. E isso não é saudavel.
		Dapper (Micro ORM): mapeador simples de objetos.
		

		ViewComponente: As notificações ficam no "Request"
		
@section Scripts : só sera executado apos os scripts das paginas pais serem carregados.
ClaimsPrincipal: representa o usuario logado na aolicação, não é uma classe do identity é do aspnet
	
17 - Finalizando as funcionalidades de Apresentação: 2:44

	Injeção de dependencia dentro da VIEW: CONCLUIDA
	javascript:history.go(-1): volta para a página anterior.
	3:30: pagina de detalhes
	
	   if (!evento.Online && evento.Endereco == null) = ESTA RETORNANDO TRUE MESMO COM O O ENDERECO DIFERENTE DE NULL
		
18 - Tratamento e Log de Erros e Auditoria no MVC: CONCLUIDA

		Mover accesdenied pra Shared?
		-Tratamento de erros
		Logs de erros é fundamental.
				Utilizar Filtros.
				
		Elmah: serviço de gravação do log. PRECISA?
		Log de auditoria.
		
19 - 19 - Camada de Serviços ASPNET WebAPI: 1:51
		
		Irá expor para a camada de apresentação tudo aquilo que que nossa aplicação é capaz de fazer.
		REST X SOAP:
			SOAP: Mais antigo - Protocolo de marcação XML
			REST: Ganhou destaque devido a "era mobile", transfere o data em seu estado puro, sem o envolope. Tornando a mensagem muito menor.
				  
				  Versionamento: 
				  Construindo um Middlewares: 2:50
				  
				 Mantendo o usuario logado: TOKEN.
				 
				 JWT:
					Primeira parte diz respeito sobre a criptografia do Token.
					Segunda parte é o "dados" do token.
					Terceira parte: assinatura, a palavra chave pra quebrar a criptografia.
			
		
	